#!/usr/bin/env python3
# -*- coding: utf-8 -*-


# 该例程将发布/stm32data_info话题，自定义消息类型uart_stm32::stm32data
import serial
import rospy
from uart_stm32.msg import stm32data
import threading
import time

table_crc_hi = (
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40)

table_crc_lo = (
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40)


class ReceiveData(object):
    def __init__(self, com_port, baud):
        self.stream_bytes = b' '
        self.recv_data = b' '
        self.test_data = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a]
        self.ser = serial.Serial(port=com_port,
                    baudrate=baud,
                    bytesize=serial.EIGHTBITS,
                    parity=serial.PARITY_NONE,
                    stopbits=serial.STOPBITS_ONE,
                    timeout=5) 
        if self.ser.isOpen():       # 判断串口是否成功打开
            print("打开串口成功。")
            print(self.ser.name)    # 输出串口号
        else:
            print("打开串口失败。")
    def read(self):
        print("开始接收串口数据")
        while True:
            self.recv_data = self.ser.read(40)	
            self.stream_bytes += self.recv_data
            first = self.stream_bytes.find(b'\xff\xee')			# 检测帧头位置
            last = self.stream_bytes.find(b'\xdd\xcc')	        # 检测帧尾位置
            if first != -1 and last != -1 and first < last:
                # print("帧头：",hex(int.from_bytes(self.stream_bytes[first:first+2], byteorder='little', signed=False)))
                # print("帧尾：",hex(int.from_bytes(self.stream_bytes[last:last+2], byteorder='little', signed=False)))
                
                recv_crc=hex(int.from_bytes(self.stream_bytes[last-2:last], byteorder='little', signed=False))
                # print("接收CRC结果:",recv_crc)
                
                calcu_crc=self.calculate_crc16(list(self.stream_bytes[first+2:last-2]), len(self.stream_bytes[first+2:last-2]))
                # print("计算CRC结果:",calcu_crc)
                # print("是否相等:",recv_crc==calcu_crc)

                if recv_crc==calcu_crc :#crc校验通过
                    vol_initial = self.stream_bytes[first+2:last-2]		# 帧头和帧尾中间的数据就是二进制数据
                    self.stream_bytes = self.stream_bytes[last + 2:]	# 更新stream_bytes数据
                    # 打印接收到的电压数据 16进制
                    # print("vol_initial:",list_to_hex_string(list(vol_initial)))
                    # 打印接收到的电压数据长度
                    # print(len(vol_initial))
                    spub.stm32data_msg.voltage00=vol_initial[0]+(vol_initial[1]<<8)
                    spub.stm32data_msg.voltage01=vol_initial[2]+(vol_initial[3]<<8)
                    spub.stm32data_msg.voltage02=vol_initial[4]+(vol_initial[5]<<8)
                    spub.stm32data_msg.voltage03=vol_initial[6]+(vol_initial[7]<<8)
                    spub.stm32data_msg.voltage04=vol_initial[8]+(vol_initial[9]<<8)
                    spub.stm32data_msg.voltage05=vol_initial[10]+(vol_initial[11]<<8)
                    spub.stm32data_msg.voltage06=vol_initial[12]+(vol_initial[13]<<8)
                    spub.stm32data_msg.voltage07=vol_initial[14]+(vol_initial[15]<<8)
                    spub.stm32data_msg.voltage08=vol_initial[16]+(vol_initial[17]<<8)
                    spub.stm32data_msg.voltage09=vol_initial[18]+(vol_initial[19]<<8)
                    spub.stm32data_msg.voltage10=vol_initial[20]+(vol_initial[21]<<8)
                    spub.stm32data_msg.voltage11=vol_initial[22]+(vol_initial[23]<<8)
                    spub.stm32data_msg.voltage12=vol_initial[24]+(vol_initial[25]<<8)
                    spub.stm32data_msg.voltage13=vol_initial[26]+(vol_initial[27]<<8)
                    vol_initial = b' '
                else :#crc校验不通过,舍弃数据
                    self.stream_bytes = self.stream_bytes[last + 2:]
                
            elif first != -1 and last != -1 and first > last :
                self.stream_bytes = self.stream_bytes[last + 2:]

    def calculate_crc16(self, data, data_len):
        crc_hi = crc_lo = 0xFF
        for i in range(data_len):
            index = crc_lo ^ data[i]
            crc_lo = crc_hi ^ table_crc_hi[index]
            crc_hi = table_crc_lo[index]
        result = hex(crc_hi << 8 | crc_lo)
        return result
class stm32data_publisher(object):
    def __init__(self,node_name,topic_name,topic_queue_size):
        # ROS节点初始化
        rospy.init_node(node_name, anonymous=True)
        # 创建一个Publisher，发布名为/stm32data_info的topic，消息类型为uart_stm32::stm32data，队列长度10
        self.stm32data_info_pub = rospy.Publisher(topic_name, stm32data, queue_size=topic_queue_size)
        # 初始化uart_com1::Person类型的消息
        self.stm32data_msg = stm32data()
    def publish(self,rosRate):
        #设置循环的频率
        rate = rospy.Rate(rosRate)
        while not rospy.is_shutdown():

            # 发布消息
            self.stm32data_info_pub.publish(self.stm32data_msg)
            
            rospy.loginfo("Publsh stm32data message[%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d]", 
                self.stm32data_msg.voltage00,
                self.stm32data_msg.voltage01,
                self.stm32data_msg.voltage02,
                self.stm32data_msg.voltage03,
                self.stm32data_msg.voltage04,
                self.stm32data_msg.voltage05,
                self.stm32data_msg.voltage06,
                self.stm32data_msg.voltage07,
                self.stm32data_msg.voltage08,
                self.stm32data_msg.voltage09,
                self.stm32data_msg.voltage10,
                self.stm32data_msg.voltage11,
                self.stm32data_msg.voltage12,
                self.stm32data_msg.voltage13)     

            # 按照循环频率延时
            rate.sleep()

if __name__ == '__main__':
    try:
        spub=stm32data_publisher(node_name='stm32data_publisher',topic_name='/stm32data_info',topic_queue_size=16)
        recv = ReceiveData("/dev/ttyUSB4",921600)

        thread1 = threading.Thread(target=recv.read, name='uart_rec', daemon=True)
        thread1.start()

        spub.publish(rosRate=20)

    except rospy.ROSInterruptException:
        pass
